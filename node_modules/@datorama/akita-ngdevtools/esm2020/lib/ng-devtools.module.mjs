import { APP_INITIALIZER, NgModule, NgZone, InjectionToken, Inject, Injectable } from '@angular/core';
import { akitaDevtools } from '@datorama/akita';
import * as i0 from "@angular/core";
export const DEVTOOLS_OPTIONS = new InjectionToken('DevtoolsOptions');
export class AkitaDevtools {
    constructor(ngZone, options) {
        this.ngZone = ngZone;
        this.options = options;
        akitaDevtools(this.ngZone, this.options);
    }
}
AkitaDevtools.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: AkitaDevtools, deps: [{ token: i0.NgZone }, { token: DEVTOOLS_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });
AkitaDevtools.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: AkitaDevtools, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: AkitaDevtools, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DEVTOOLS_OPTIONS]
                }] }]; } });
// auto initialize the devtools
export function d() { }
export function init(akitaDevtools) {
    return d;
}
export class AkitaNgDevtools {
    static forRoot(options) {
        return {
            ngModule: AkitaNgDevtools,
            providers: [
                {
                    provide: DEVTOOLS_OPTIONS,
                    useValue: options
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: init,
                    deps: [AkitaDevtools],
                    multi: true
                }
            ]
        };
    }
}
AkitaNgDevtools.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: AkitaNgDevtools, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AkitaNgDevtools.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: AkitaNgDevtools });
AkitaNgDevtools.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: AkitaNgDevtools });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: AkitaNgDevtools, decorators: [{
            type: NgModule,
            args: [{}]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZGV2dG9vbHMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmctZGV2dG9vbHMvc3JjL2xpYi9uZy1kZXZ0b29scy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBdUIsUUFBUSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzSCxPQUFPLEVBQUUsYUFBYSxFQUFtQixNQUFNLGlCQUFpQixDQUFDOztBQUVqRSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FBa0IsaUJBQWlCLENBQUMsQ0FBQztBQUt2RixNQUFNLE9BQU8sYUFBYTtJQUN4QixZQUFvQixNQUFjLEVBQW9DLE9BQXdCO1FBQTFFLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBb0MsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFDNUYsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNDLENBQUM7OzBHQUhVLGFBQWEsd0NBQ29CLGdCQUFnQjs4R0FEakQsYUFBYSxjQUZaLE1BQU07MkZBRVAsYUFBYTtrQkFIekIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQUVzQyxNQUFNOzJCQUFDLGdCQUFnQjs7QUFLOUQsK0JBQStCO0FBQy9CLE1BQU0sVUFBVSxDQUFDLEtBQUksQ0FBQztBQUV0QixNQUFNLFVBQVUsSUFBSSxDQUFDLGFBQTRCO0lBQy9DLE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQUdELE1BQU0sT0FBTyxlQUFlO0lBQ25CLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBa0M7UUFDdEQsT0FBTztZQUNMLFFBQVEsRUFBRSxlQUFlO1lBQ3pCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsZ0JBQWdCO29CQUN6QixRQUFRLEVBQUUsT0FBTztpQkFDbEI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLGVBQWU7b0JBQ3hCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUM7b0JBQ3JCLEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7NEdBakJVLGVBQWU7NkdBQWYsZUFBZTs2R0FBZixlQUFlOzJGQUFmLGVBQWU7a0JBRDNCLFFBQVE7bUJBQUMsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQUF9JTklUSUFMSVpFUiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE5nWm9uZSwgSW5qZWN0aW9uVG9rZW4sIEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYWtpdGFEZXZ0b29scywgRGV2dG9vbHNPcHRpb25zIH0gZnJvbSAnQGRhdG9yYW1hL2FraXRhJztcblxuZXhwb3J0IGNvbnN0IERFVlRPT0xTX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48RGV2dG9vbHNPcHRpb25zPignRGV2dG9vbHNPcHRpb25zJyk7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFraXRhRGV2dG9vbHMge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lLCBASW5qZWN0KERFVlRPT0xTX09QVElPTlMpIHByaXZhdGUgb3B0aW9uczogRGV2dG9vbHNPcHRpb25zKSB7XG4gICAgYWtpdGFEZXZ0b29scyh0aGlzLm5nWm9uZSwgdGhpcy5vcHRpb25zKTtcbiAgfVxufVxuXG4vLyBhdXRvIGluaXRpYWxpemUgdGhlIGRldnRvb2xzXG5leHBvcnQgZnVuY3Rpb24gZCgpIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KGFraXRhRGV2dG9vbHM6IEFraXRhRGV2dG9vbHMpIHtcbiAgcmV0dXJuIGQ7XG59XG5cbkBOZ01vZHVsZSh7fSlcbmV4cG9ydCBjbGFzcyBBa2l0YU5nRGV2dG9vbHMge1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3Qob3B0aW9ucz86IFBhcnRpYWw8RGV2dG9vbHNPcHRpb25zPik6IE1vZHVsZVdpdGhQcm92aWRlcnM8QWtpdGFOZ0RldnRvb2xzPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBBa2l0YU5nRGV2dG9vbHMsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IERFVlRPT0xTX09QVElPTlMsXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgICAgICAgICB1c2VGYWN0b3J5OiBpbml0LFxuICAgICAgICAgIGRlcHM6IFtBa2l0YURldnRvb2xzXSxcbiAgICAgICAgICBtdWx0aTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19